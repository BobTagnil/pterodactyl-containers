#!/bin/bash

###
# Init script for this project. Creates initial project configuration
###


## VARIABLES

interact="true" # Enable interactive mode

# List of services
use_defaults="yes"
enable_service_panel=""
enable_service_node=""
enable_service_db=""
enable_service_le=""
enable_sftp_daemon=""

enable_build_options=""

# Daemon Options
daemon_dir=""
daemon_docker_socket=""
daemon_docker_root=""

#Database Options
database_ip_address=""

# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Pterodactyl Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help  , -h             - returns this screen"
    echo " --enable-panel           - adds panel"
    echo " --enable-db              - adds mysql database"
    echo " --enable-daemon          - adds daemon"
    echo " --enable-letsencrypt     - adds letsencrypt"
    echo " --enable-build-options   -"
    echo " --db-address             -"
    echo " --daemon-dir             -"
    echo " --daemon-docker-socket   -"
    echo " --daemon-docker-root     -"
	echo ""
}

function build_config {
    echo "Building Configuration..."

    IFS=" "

    # Build the base config
    bin/yq merge -a -x \
    $( # Enable Panel Service
        if [ "$enable_service_panel" == "x" ]; then 
            printf " ./manifest/compose/panel.yml"

            # Optional Panel Services and Parameters
            if [ "$enable_build_options" == "x" ]; then
                printf " ./manifest/compose/build.panel.yml"
                if grep -q "PANEL_VERSION=" .env; then
                    sed -i "s/PANEL_VERSION=.*/$(grep "PANEL_VERSION=" manifest/version.txt)/" .env
                else
                    grep "PANEL_VERSION=" manifest/version.txt >> .env
                fi
            fi
            if [ "$enable_service_le" == "x" ]; then
                printf " ./manifest/compose/le.panel.yml"
            fi
        fi ) \
    $( # Enable Daemon Service
        if [ "$enable_service_node" == "x" ]; then 
            printf " ./manifest/compose/daemon.yml"

            # Optional Daemon Services and Parameters
            if [ "$enable_build_options" == "x" ]; then
                printf " ./manifest/compose/build.daemon.yml"
                    if grep -q "DAEMON_VERSION=" .env; then
                        sed -i "s/DAEMON_VERSION=.*/$(grep "DAEMON_VERSION=" manifest/version.txt)/" .env
                    else
                        grep "DAEMON_VERSION=" manifest/version.txt >> .env
                    fi
            fi

            if [ "$enable_service_le" == "x" ] && [ "$enable_service_panel" == "" ]; then
                printf " ./manifest/compose/le.daemon.yml"
            fi

            # .env Configuration
            if [ ! $daemon_dir == "" ]; then
                if grep -q "DAEMON_DATA_DIRECTORY=" .env; then
                    sed -i "s|DAEMON_DATA_DIRECTORY=.*|DAEMON_DATA_DIRECTORY=${daemon_dir}|" .env
                else
                    echo "DAEMON_DATA_DIRECTORY=$daemon_dir" >> .env
                fi
            fi

            if [ ! $daemon_docker_root == "" ]; then
                if grep -q "DAEMON_DOCKER_ROOT=" .env; then
                    sed -i "s|DAEMON_DOCKER_ROOT=.*|DAEMON_DOCKER_ROOT=$daemon_docker_root|" .env
                else
                    echo "DAEMON_DOCKER_ROOT=$daemon_docker_root" >> .env
                fi
            fi

            if [ ! $daemon_docker_socket == "" ]; then
                if grep -q "DAEMON_DOCKER_SOCKET=" .env; then
                    sed -i "s|DAEMON_DOCKER_SOCKET=.*|DAEMON_DOCKER_SOCKET=$daemon_docker_socket|" .env
                else
                    echo "DAEMON_DOCKER_SOCKET=$daemon_docker_socket" >> .env
                fi
            fi
        fi ) \
    $( # Enable Database
        if [ "$enable_service_db" == "x" ]; then 
            printf " ./manifest/compose/db.yml"

            # .env Configuration
            if [ ! $database_ip_address == "" ]; then
                if grep -q "MYSQL_ADDRESS=" .env; then
                    sed -i "s|MYSQL_ADDRESS=.*|MYSQL_ADDRESS=$database_ip_address:3306|" .env
                else
                    echo "MYSQL_ADDRESS=$database_ip_address:3306" >> .env
                fi
            fi
        fi ) \
    | bin/yq read --stripComments - > docker-compose.yml

    # Create and populate the config directory
    if ! [ -d "conf.d" ]; then
        mkdir conf.d
        cp ./manifest/config/* conf.d -rpv
    fi
}

# Fixing some nonsense with function returning
IFS=

cd "$(dirname $0)/../"

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" =~ "--" || ${!i} =~ "-" ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            # Enable Services
            --enable-daemon) # Enables wings
                enable_service_node="x"
                use_defaults="no"
                ;;
            --enable-panel) # Enables panel
                enable_service_panel="x"
                use_defaults="no"
                ;;
            --enable-db) # Enables Database
                enable_service_db="x"
                use_defaults="no"
                ;;
            --enable-letsencrypt) # Enable Let's Encrypt
                enable_service_le="x"
                use_defaults="no"
                ;;
            --enable-build-options)
                enable_build_options="x"
                ;;
            # Modify Certain runtime options
            --daemon-dir)
                ((i++))
                daemon_dir="${!i}"
                ;;
            --daemon-docker-socket)
                ((i++))
                daemon_docker_socket="${!i}"
                ;;
            --daemon-docker-root)
                ((i++))
                daemon_docker_root="${!i}"
                ;;
            --db-address) # Allows Database to be bound to a port;
                ((i++))
                database_ip_address="${!i}"
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done

build_config
