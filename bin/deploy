#!/bin/bash

###
# create-project - Creates initial project configuration
###


## VARIABLES

# Toggle Flags
missing_flags="yes"
flag_enable_panel=""
flag_enable_daemon=""
flag_enable_db=""
flag_enable_le=""
flag_enable_build=""

# Allows configuring where the output can be put out to.
flag_stdout="docker-compose.yml"

# Panel Configuration
config_panel_port_http=""
config_panel_port_https=""

# Daemon Configuration
config_daemon_dir=""
config_deamon_port_sftp=""
config_deamon_port_http=""

config_docker_socket=""

# Database Configuration
config_database_ip_address=""
# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Pterodactyl Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help  , -h             - returns this screen"
    echo " --panel                  - adds panel [*]"
    echo " --daemon                 - adds daemon [*]"
    echo " --database               - adds mysql database"
    echo " --letsencrypt            - adds letsencrypt"
    echo " --build                  - enables build options"
    echo ""
    echo " --daemon-dir             - configures where the daemon sets its files and config (ex. /var/lib/pterodactyl)"
    echo " --docker-socket          - where the daemon contacts docker (ex. /var/run/docker.sock)"
	echo " --deamon-port-http       - change deamon container outside http port from 8080"
    echo " --deamon-port-sftp       - change deamon container outside sftp port from 2022"
    echo ""
    echo " --db-address             - configures the database address (ex. 127.0.0.1:3306)"
    echo ""
    echo " --panel-port-http        - change panel container outside http port from 80"
    echo " --panel-port-https       - change panel container outside https port from 443"
    echo ""
    echo " [*] When building a custom docker-compose file, you must specify either the panel or daemon to build"
    echo ""
}

function build_config {
    >&2 echo "Building Configuration..."

    IFS=" "

    if [ -f docker-compose.yml ]; then
        rm -rf docker-compose.bak.yml
        mv docker-compose.yml docker-compose.bak.yml
    fi

    # Build the base config
    # Such a hacky way to do this, but it does appear to be cleaner
    bin/yq merge -a append -x \
    $( # Enable Panel
        if [ "$flag_enable_panel" == "x" ]; then 
            printf " ./manifest/compose/panel.yml"

            # Optional Panel Services and Parameters
            if [ "$flag_enable_build" == "x" ]; then
                printf " ./manifest/compose/build/panel.yml"
            fi

        fi ) \
    $( # Enable Daemon
        if [ "$flag_enable_daemon" == "x" ]; then 
            printf " ./manifest/compose/daemon.yml"

            # Optional Daemon Services and Parameters
            if [ "$flag_enable_build" == "x" ]; then
                printf " ./manifest/compose/build/daemon.yml"
            fi
        fi ) \
    $( # Enable Let's Encrypt
        if [ "$flag_enable_le" == "x" ]; then
            if [ "$flag_enable_panel" == "x" ]; then
                printf " ./manifest/compose/letsencrypt/webroot.yml"
            else
                printf " ./manifest/compose/letsencrypt/standalone.yml"
            fi

            if [ "$flag_enable_daemon" == "x" ]; then
                printf " ./manifest/compose/letsencrypt/daemon.dep.yml"
            fi
        fi
    ) \
    $( # Enable Database
        if [ "$flag_enable_db" == "x" ]; then 
            printf " ./manifest/compose/database/database.yml"
            if [ "$flag_enable_panel" == "x" ]; then
                printf " ./manifest/compose/database/panel.dep.yml"
            fi
        fi ) \
    | bin/yq read --stripComments - > $flag_stdout


    # Build .env Configuration

    # Create .env file if it does not exist.
    if ! [ -f .env ]; then
        echo "## Project configuration file ##" > .env
        echo "# DO NOT TOUCH UNLESS YOU KNOW WHAT YOU ARE DOING!" >> .env
        echo "" >> .env
    fi

    if [ "$flag_enable_panel" == "x" ]; then
        if [ "$flag_enable_build" == "x" ]; then
            if grep -q "PANEL_VERSION=" .env; then
                sed -i "s/PANEL_VERSION=.*/$(grep "PANEL_VERSION=" manifest/version.txt)/" .env
            else
                grep "PANEL_VERSION=" manifest/version.txt >> .env
            fi
        fi
    fi

    if [ "$flag_enable_daemon" == "x" ]; then
        if [ "$flag_enable_build" == "x" ]; then
            if grep -q "DAEMON_VERSION=" .env; then
                sed -i "s/DAEMON_VERSION=.*/$(grep "DAEMON_VERSION=" manifest/version.txt)/" .env
            else
                grep "DAEMON_VERSION=" manifest/version.txt >> .env
            fi
        fi

        if [ ! $config_daemon_dir == "" ]; then
            if grep -q "DAEMON_DATA_DIRECTORY=" .env; then
                sed -i "s|DAEMON_DATA_DIRECTORY=.*|DAEMON_DATA_DIRECTORY=${config_daemon_dir}|" .env
            else
                echo "DAEMON_DATA_DIRECTORY=$config_daemon_dir" >> .env
            fi
        fi
    fi

    if [ "$flag_enable_db" == "x" ]; then
        if [ ! $config_database_ip_address == "" ]; then
            if grep -q "MYSQL_ADDRESS=" .env; then
                sed -i "s|MYSQL_ADDRESS=.*|MYSQL_ADDRESS=$config_database_ip_address:3306|" .env
            else
                echo "MYSQL_ADDRESS=$config_database_ip_address:3306" >> .env
            fi
        fi
    fi

    if [ ! $config_docker_socket == "" ]; then
        if grep -q "DOCKER_SOCKET=" .env; then
            sed -i "s|DOCKER_SOCKET=.*|DOCKER_SOCKET=$config_docker_socket|" .env
        else
            echo "DOCKER_SOCKET=$config_docker_socket" >> .env
        fi
    fi

    if [ ! $config_deamon_port_http == "" ]; then
        if grep -q "DEAMON_PORT_HTTP=" .env; then
            sed -i "s|DEAMON_PORT_HTTP=.*|DEAMON_PORT_HTTP=$config_panel_port_http|" .env
        else
            echo "DEAMON_PORT_HTTP=$config_panel_port_http" >> .env
        fi
    fi

    if [ ! $config_deamon_port_sftp == "" ]; then
        if grep -q "DEAMON_PORT_SFTP=" .env; then
            sed -i "s|DEAMON_PORT_SFTP=.*|DEAMON_PORT_SFTP=$config_deamon_port_sftp|" .env
        else
            echo "DEAMON_PORT_SFTP=$config_deamon_port_sftp" >> .env
        fi
    fi

    if [ ! $config_panel_port_http == "" ]; then
        if grep -q "PANEL_PORT_HTTP=" .env; then
            sed -i "s|PANEL_PORT_HTTP=.*|PANEL_PORT_HTTP=$config_panel_port_http|" .env
        else
            echo "PANEL_PORT_HTTP=$config_panel_port_http" >> .env
        fi
    fi

    if [ ! $config_panel_port_https == "" ]; then
        if grep -q "PANEL_PORT_HTTPS=" .env; then
            sed -i "s|PANEL_PORT_HTTPS=.*|PANEL_PORT_HTTPS=$config_panel_port_https|" .env
        else
            echo "PANEL_PORT_HTTPS=$config_panel_port_https" >> .env
        fi
    fi

    # Create conf.d/data directory

    # Make directory and populate it with base environment files
    mkdir -m 700 -p conf.d
    cp -rpnv ./manifest/config/env/* ./conf.d/

    # Builds Let's Encrypt Directory and config.
    if [ "$flag_enable_le" == "x" ]; then
        mkdir -p ./conf.d/letsencrypt
        rm -f ./conf.d/letsencrypt/cli.ini

        # Determines which method Let's Encrypt will use when deploying certificates.
        # This simplifies running the certbot command.
        if [ "$flag_enable_panel" == "x" ]; then
            cp ./manifest/config/letsencrypt/webroot.ini ./conf.d/letsencrypt/cli.ini
        else 
            cp ./manifest/config/letsencrypt/standalone.ini ./conf.d/letsencrypt/cli.ini
        fi
    fi

}

# Fixing some nonsense with function returning
IFS=

cd "$(dirname $0)/../"

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" == -* ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            # Enable Services
            --daemon) # Enables wings
                flag_enable_daemon="x"
                missing_flags="no"
                ;;
            --panel) # Enables panel
                flag_enable_panel="x"
                missing_flags="no"
                ;;
            --database) # Enables Database
                flag_enable_db="x"
                missing_flags="no"
                ;;
            --letsencrypt) # Enable Let's Encrypt
                flag_enable_le="x"
                missing_flags="no"
                ;;
            --build)
                flag_enable_build="x"
                ;;
            # Modify Certain runtime options
            --daemon-dir)
                ((i++))
                config_daemon_dir="${!i}"
                ;;
            --docker-socket)
                ((i++))
                config_docker_socket="${!i}"
                ;;
            --deamon-port-http)
                ((i++))
                config_deamon_port_http="${!i}"
                ;;
            --deamon-port-sftp)
                ((i++))
                config_deamon_port_sftp="${!i}"
                ;;
            --panel-port-http)
                ((i++))
                config_panel_port_http="${!i}"
                ;;
            --panel-port-https)
                ((i++))
                config_panel_port_https="${!i}"
                ;;
            --db-address) # Allows Database to be bound to a port;
                ((i++))
                config_database_ip_address="${!i}"
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done

if [ $missing_flags == "yes" ]; then
    flag_enable_panel="x"
    flag_enable_daemon="x"
    flag_enable_db="x"
    flag_enable_le="x"
fi

if [ "$flag_enable_panel" = "" ] && [ "$flag_enable_daemon" = "" ]; then
    echo "Error! Missing --panel and or --daemon flag! You must specify at least one when building a custom compose file."
    exit
fi


build_config
