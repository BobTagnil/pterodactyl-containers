#!/bin/bash

###
# create-project - Creates initial project configuration
###


## VARIABLES

# Toggle Flags
missing_flags="yes"
flag_enable_panel=""
flag_enable_daemon=""
flag_enable_db=""
flag_enable_le=""
flag_enable_build=""

# Daemon Configuration
config_daemon_dir=""
config_daemon_docker_socket=""
config_daemon_docker_root=""

# Database Configuration
config_database_ip_address=""
# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Pterodactyl Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help  , -h             - returns this screen"
    echo " --panel                  - adds panel"
    echo " --database               - adds mysql database"
    echo " --daemon                 - adds daemon"
    echo " --letsencrypt            - adds letsencrypt"
    echo " --build                  - enables build options"
    echo ""
    echo " --daemon-dir             - configures where the daemon sets its files and config (ex. /var/lib/pterodactyl)"
    echo " --daemon-docker-socket   - where the daemon contacts docker (ex. /var/run/docker.sock)"
    echo " --daemon-docker-root     - where the daemon reads docker (ex. /var/lib/docker)"
	echo ""
    echo " --db-address             - configures the database address (ex. 127.0.0.1:3306)"
}

function build_config {
    echo "Building Configuration..."

    IFS=" "

    # Build the base config
    # Such a hacky way to do this, but it does appear to be cleaner
    bin/yq merge -a -x \
    $( # Enable Panel
        if [ "$flag_enable_panel" == "x" ]; then 
            printf " ./manifest/compose/panel.yml"

            # Optional Panel Services and Parameters
            if [ "$flag_enable_build" == "x" ]; then
                printf " ./manifest/compose/build.panel.yml"
            fi

            # Enable Let's Encrypt for the panel.
            if [ "$flag_enable_le" == "x" ]; then
                printf " ./manifest/compose/le.panel.yml"
            fi
        fi ) \
    $( # Enable Daemon
        if [ "$flag_enable_daemon" == "x" ]; then 
            printf " ./manifest/compose/daemon.yml"

            # Optional Daemon Services and Parameters
            if [ "$flag_enable_build" == "x" ]; then
                printf " ./manifest/compose/build.daemon.yml"
            fi

            # Enable Let's Encrypt for the daemon as long as the panel is not enabled.
            if [ "$flag_enable_le" == "x" ] && [ "$flag_enable_panel" == "" ]; then
                printf " ./manifest/compose/le.daemon.yml"
            fi
        fi ) \
    $( # Enable Database
        if [ "$flag_enable_db" == "x" ]; then 
            printf " ./manifest/compose/db.yml"
        fi ) \
    | bin/yq read --stripComments - > docker-compose.yml


    # Build .env Configuration

    # Create .env file if it does not exist.
    if ! [ -f .env ]; then
        echo "## Project configuration file ##" > .env
        echo "# DO NOT TOUCH UNLESS YOU KNOW WHAT YOU ARE DOING!" >> .env
        echo "" >> .env
        echo "CMD_ARGS=$($command_args)" >> .env
    fi

    if [ "$flag_enable_panel" == "x" ]; then
        if [ "$flag_enable_build" == "x" ]; then
            if grep -q "PANEL_VERSION=" .env; then
                sed -i "s/PANEL_VERSION=.*/$(grep "PANEL_VERSION=" manifest/version.txt)/" .env
            else
                grep "PANEL_VERSION=" manifest/version.txt >> .env
            fi
        fi
    fi

    if [ "$flag_enable_daemon" == "x" ]; then
        if [ "$flag_enable_build" == "x" ]; then
            if grep -q "DAEMON_VERSION=" .env; then
                sed -i "s/DAEMON_VERSION=.*/$(grep "DAEMON_VERSION=" manifest/version.txt)/" .env
            else
                grep "DAEMON_VERSION=" manifest/version.txt >> .env
            fi
        fi

        if [ ! $config_daemon_dir == "" ]; then
            if grep -q "DAEMON_DATA_DIRECTORY=" .env; then
                sed -i "s|DAEMON_DATA_DIRECTORY=.*|DAEMON_DATA_DIRECTORY=${config_daemon_dir}|" .env
            else
                echo "DAEMON_DATA_DIRECTORY=$config_daemon_dir" >> .env
            fi
        fi

        if [ ! $config_daemon_docker_root == "" ]; then
            if grep -q "DAEMON_DOCKER_ROOT=" .env; then
                sed -i "s|DAEMON_DOCKER_ROOT=.*|DAEMON_DOCKER_ROOT=$config_daemon_docker_root|" .env
            else
                echo "DAEMON_DOCKER_ROOT=$config_daemon_docker_root" >> .env
            fi
        fi

        if [ ! $config_daemon_docker_socket == "" ]; then
            if grep -q "DAEMON_DOCKER_SOCKET=" .env; then
                sed -i "s|DAEMON_DOCKER_SOCKET=.*|DAEMON_DOCKER_SOCKET=$config_daemon_docker_socket|" .env
            else
                echo "DAEMON_DOCKER_SOCKET=$config_daemon_docker_socket" >> .env
            fi
        fi
    fi

    if [ "$flag_enable_db" == "x" ]; then
        if [ ! $config_database_ip_address == "" ]; then
            if grep -q "MYSQL_ADDRESS=" .env; then
                sed -i "s|MYSQL_ADDRESS=.*|MYSQL_ADDRESS=$database_ip_address:3306|" .env
            else
                echo "MYSQL_ADDRESS=$database_ip_address:3306" >> .env
            fi
        fi
    fi

    # Create conf.d/data directory

    # Make directory and populate it with base config files
    mkdir -p conf.d
    cp -rpnv ./manifest/config/env/* ./conf.d/

    # Builds Let's Encrypt Directory and config.
    if [ "$flag_enable_le" == "x" ]; then
        mkdir -p ./conf.d/letsencrypt
        rm -f ./conf.d/letsencrypt/cli.ini

        # Determines which method Let's Encrypt will use when deploying certificates.
        # This simplifies running the certbot command.
        if [ "$flag_enable_panel" == "x" ]; then
            cp ./manifest/config/letsencrypt.webroot.ini ./conf.d/letsencrypt/cli.ini
        else 
            cp ./manifest/config/letsencrypt.standalone.ini ./conf.d/letsencrypt/cli.ini
        fi
    fi

}

# Fixing some nonsense with function returning
IFS=

cd "$(dirname $0)/../"

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" =~ "--" || ${!i} =~ "-" ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            # Enable Services
            --daemon) # Enables wings
                flag_enable_daemon="x"
                missing_flags="no"
                ;;
            --panel) # Enables panel
                flag_enable_panel="x"
                missing_flags="no"
                ;;
            --database) # Enables Database
                flag_enable_db="x"
                missing_flags="no"
                ;;
            --letsencrypt) # Enable Let's Encrypt
                flag_enable_le="x"
                missing_flags="no"
                ;;
            --build)
                flag_enable_build="x"
                ;;
            # Modify Certain runtime options
            --daemon-dir)
                ((i++))
                config_daemon_dir="${!i}"
                ;;
            --daemon-docker-socket)
                ((i++))
                config_daemon_docker_socket="${!i}"
                ;;
            --daemon-docker-root)
                ((i++))
                config_daemon_docker_root="${!i}"
                ;;
            --db-address) # Allows Database to be bound to a port;
                ((i++))
                config_database_ip_address="${!i}"
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done

if [ $missing_flags == "yes" ]; then
    flag_enable_panel="x"
    flag_enable_daemon="x"
    flag_enable_db="x"
    flag_enable_le="x"
fi

build_config
